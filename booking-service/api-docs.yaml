openapi: 3.0.0
info:
  title: Booking API
  description: API for managing bookings.
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /booking/create:
    post:
      summary: Create a new booking.
      requestBody:
        description: The details of the booking to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
            example:
              date: "2024-12-10"
              serviceId: "010000000000000000000000"
              userId: "110000000000000000000000"
              start: 540
              end: 600
      responses:
        '200':
          description: Booking successfully created.
          content:
            application/json:
              example:
                message: "Booking successfully created."
        '400':
          description: Bad request due to invalid parameters or malformed input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "validation_error"
                title: "Invalid input"
                status: 400
                detail: "Start time must be before end time."
        '500':
          description: Internal server error due to an unexpected condition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "server_error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred."

  /booking/delete:
    post:
      summary: Delete an existing booking.
      requestBody:
        description: The details of the booking to be deleted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBookingRequest'
            example:
              date: "2024-12-10"
              serviceId: "010000000000000000000000"
              bookingId: "100000000000000000000000"
              userId: "110000000000000000000000"
      responses:
        '200':
          description: Booking successfully deleted.
          content:
            application/json:
              example:
                message: "Booking successfully deleted."
        '400':
          description: Bad request due to invalid parameters or malformed input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "validation_error"
                title: "Invalid input"
                status: 400
                detail: "Booking ID does not exist."
        '500':
          description: Internal server error due to an unexpected condition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "server_error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred."

  /booking/available:
    get:
      summary: Get available time ranges for a service on a specific date.
      parameters:
        - name: date
          in: query
          description: The date to check for available time ranges.
          required: true
          schema:
            type: string
            format: date
            example: "2024-12-10"
        - name: serviceId
          in: query
          description: The ID of the service for which time ranges are being queried.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
            example: "010000000000000000000000"
        - name: serviceDuration
          in: query
          description: The duration of the service in minutes.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            example: 30
      responses:
        '200':
          description: A list of available time ranges for the service.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeRangeResponse'
              example:
                - start: 540
                  end: 570
                - start: 600
                  end: 630
        '400':
          description: Bad request due to invalid parameters or malformed input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "validation_error"
                title: "Invalid input"
                status: 400
                detail: "Invalid date format."
        '500':
          description: Internal server error due to an unexpected condition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "server_error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred."

  /booking:
    get:
      summary: Get the booking information for a specific user.
      parameters:
        - name: date
          in: query
          description: The date of the booking.
          required: true
          schema:
            type: string
            format: date
            example: "2024-12-10"
        - name: serviceId
          in: query
          description: The ID of the service for the booking.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
            example: "010000000000000000000000"
        - name: bookingId
          in: query
          description: The ID of the booking.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
            example: "100000000000000000000000"
      responses:
        '400':
          description: Bad request due to invalid parameters or malformed input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "validation_error"
                title: "Invalid input"
                status: 400
                detail: "Booking ID does not match."
        '404':
          description: User booking not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "not_found"
                title: "Booking Not Found"
                status: 404
                detail: "No booking found for the given ID."
        '500':
          description: Internal server error due to an unexpected condition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "server_error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred."

  /booking/all:
    get:
      summary: Get all bookings for specified dates, services, and users.
      parameters:
        - name: dates
          in: query
          description: A comma-separated list of dates to fetch bookings for.
          required: false
          schema:
            type: string
            example: "2024-12-01,2024-12-02"
            default: ""
        - name: serviceIds
          in: query
          description: A comma-separated list of service IDs to filter bookings.
          required: false
          schema:
            type: string
            example: "010000000000000000000000,010000000000000000000001"
            default: ""
        - name: userIds
          in: query
          description: A comma-separated list of user IDs to filter bookings.
          required: false
          schema:
            type: string
            example: "110000000000000000000000,110000000000000000000001"
            default: ""
      responses:
        '200':
          description: A list of service bookings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceBookingResponse'
              example:
                - id: "000000000000000000000000"
                  date: "2024-12-01"
                  serviceId: "010000000000000000000000"
                  bookings:
                    - id: "100000000000000000000000"
                      userId: "110000000000000000000000"
                      start: 540
                      end: 600
        '400':
          description: Bad request due to invalid parameters or malformed input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "validation_error"
                title: "Invalid input"
                status: 400
                detail: "Date format is incorrect."
        '500':
          description: Internal server error due to an unexpected condition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: "server_error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred."

components:
  schemas:
    ObjectId:
      type: string
      pattern: "^[a-fA-F0-9]{24}$"  # MongoDB ObjectId format
      example: "000000000000000000000000"

    CreateBookingRequest:
      type: object
      properties:
        date:
          type: string
          format: date
        serviceId:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/ObjectId'
        start:
          type: integer
        end:
          type: integer
      required:
        - date
        - serviceId
        - userId
        - start
        - end

    DeleteBookingRequest:
      type: object
      properties:
        date:
          type: string
          format: date
        serviceId:
          $ref: '#/components/schemas/ObjectId'
        bookingId:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/ObjectId'
      required:
        - date
        - serviceId
        - bookingId
        - userId

    TimeRangeResponse:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
      example:
        start: 540
        end: 570

    UserBookingResponse:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/ObjectId'
        start:
          type: integer
        end:
          type: integer

    ServiceBookingResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        date:
          type: string
          format: date
        serviceId:
          $ref: '#/components/schemas/ObjectId'
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'

    Booking:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/ObjectId'
        start:
          type: integer
        end:
          type: integer

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
      example:
        type: "error_type"
        title: "Error Title"
        status: 400
        detail: "Detailed error message."
